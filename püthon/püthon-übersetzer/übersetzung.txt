1. Schlüsselwörter (Keywords)
Diese sind in Python reserviert und können nicht als Variablen- oder Funktionsnamen verwendet werden.

#Kontrollfluss

if = wenn 
elif = sowenn
else = sonst
for = für
while = solange
break = unterbreche
continue = fortsetzen
try = versuche
except = ausgenommen
finally = endlich
raise = erhebe
assert = behaupte
with = mit
as = als


#Funktion & Klassen

def = definiere 
class = klasse
return = ausgabe
yield = ergebe


#Datenfluss & Typen

import = importiere 
from = aus
as = als
pass = erlasse
del = entferne
global = weltweit
nonlocal = außerorts
lambda = lambda


#Boolesche Werte & Vergleich

True = Wahr
False = Falsch
None = Nichts
and = und
or = oder
not = nicht
is = ist
in = in


2. Datentypen & Literale
Primitive Datentypen

int = int 
float =  float (Gleitkommazahl)
complex = komplex
str =  string 
bytes = bytes
bytearray = bytearray
bool = bool
list = liste
tuple = tupel
set = setzen
dict = wörterbuch

#Literale

123 (Integer), 
3.14 (Float)
"Text" (String), 
b"bytes" (Bytes)
[1, 2, 3] (Liste), 
(1, 2, 3) (Tupel), 
{1, 2, 3} (Set), 
{"key": "value"} (Dictionary)


3. Operatoren
Arithmetische Operatoren

+, -, *, /, //, %, **
Vergleichsoperatoren

==, !=, <, >, <=, >=
Logische Operatoren

and, or, not
Zuweisungsoperatoren

=, +=, -=, *=, /=, //=, %=, **=
Bitweise Operatoren

&, |, ^, ~, <<, >>
Mitglieds- & Identitätsoperatoren

in, not in
is, is not


4. Struktur & Blöcke

Einrückung (anstatt {} oder begin/end)
Doppelpunkt : zur Blockeinleitung
Klammern
() für Funktionsaufrufe und Tupel
[] für Listen und Indexierung
{} für Sets und Dictionaries


5. Besondere Syntaxelemente

Dekoratoren: @deco_name
List Comprehensions: [x for x in iterable]
F-Strings: f"Text {variable}"
Formatierte Zeichenketten: "{} {}".format(a, b)
match-case (ab Python 3.10)